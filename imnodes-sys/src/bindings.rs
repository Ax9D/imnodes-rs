/* automatically generated by rust-bindgen 0.56.0 */

pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type size_t = __darwin_size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EditorContext {
    _unused: [u8; 0],
}
pub const ColorStyle_ColorStyle_NodeBackground: ColorStyle = 0;
pub const ColorStyle_ColorStyle_NodeBackgroundHovered: ColorStyle = 1;
pub const ColorStyle_ColorStyle_NodeBackgroundSelected: ColorStyle = 2;
pub const ColorStyle_ColorStyle_NodeOutline: ColorStyle = 3;
pub const ColorStyle_ColorStyle_TitleBar: ColorStyle = 4;
pub const ColorStyle_ColorStyle_TitleBarHovered: ColorStyle = 5;
pub const ColorStyle_ColorStyle_TitleBarSelected: ColorStyle = 6;
pub const ColorStyle_ColorStyle_Link: ColorStyle = 7;
pub const ColorStyle_ColorStyle_LinkHovered: ColorStyle = 8;
pub const ColorStyle_ColorStyle_LinkSelected: ColorStyle = 9;
pub const ColorStyle_ColorStyle_Pin: ColorStyle = 10;
pub const ColorStyle_ColorStyle_PinHovered: ColorStyle = 11;
pub const ColorStyle_ColorStyle_BoxSelector: ColorStyle = 12;
pub const ColorStyle_ColorStyle_BoxSelectorOutline: ColorStyle = 13;
pub const ColorStyle_ColorStyle_GridBackground: ColorStyle = 14;
pub const ColorStyle_ColorStyle_GridLine: ColorStyle = 15;
pub const ColorStyle_ColorStyle_Count: ColorStyle = 16;
pub type ColorStyle = ::std::os::raw::c_uint;
pub const StyleVar_StyleVar_GridSpacing: StyleVar = 0;
pub const StyleVar_StyleVar_NodeCornerRounding: StyleVar = 1;
pub const StyleVar_StyleVar_NodePaddingHorizontal: StyleVar = 2;
pub const StyleVar_StyleVar_NodePaddingVertical: StyleVar = 3;
pub const StyleVar_StyleVar_NodeBorderThickness: StyleVar = 4;
pub const StyleVar_StyleVar_LinkThickness: StyleVar = 5;
pub const StyleVar_StyleVar_LinkLineSegmentsPerLength: StyleVar = 6;
pub const StyleVar_StyleVar_LinkHoverDistance: StyleVar = 7;
pub const StyleVar_StyleVar_PinCircleRadius: StyleVar = 8;
pub const StyleVar_StyleVar_PinQuadSideLength: StyleVar = 9;
pub const StyleVar_StyleVar_PinTriangleSideLength: StyleVar = 10;
pub const StyleVar_StyleVar_PinLineThickness: StyleVar = 11;
pub const StyleVar_StyleVar_PinHoverRadius: StyleVar = 12;
pub const StyleVar_StyleVar_PinOffset: StyleVar = 13;
pub type StyleVar = ::std::os::raw::c_uint;
pub const StyleFlags_StyleFlags_None: StyleFlags = 0;
pub const StyleFlags_StyleFlags_NodeOutline: StyleFlags = 1;
pub const StyleFlags_StyleFlags_GridLines: StyleFlags = 4;
pub type StyleFlags = ::std::os::raw::c_uint;
pub const PinShape_PinShape_Circle: PinShape = 0;
pub const PinShape_PinShape_CircleFilled: PinShape = 1;
pub const PinShape_PinShape_Triangle: PinShape = 2;
pub const PinShape_PinShape_TriangleFilled: PinShape = 3;
pub const PinShape_PinShape_Quad: PinShape = 4;
pub const PinShape_PinShape_QuadFilled: PinShape = 5;
pub type PinShape = ::std::os::raw::c_uint;
pub const AttributeFlags_AttributeFlags_None: AttributeFlags = 0;
pub const AttributeFlags_AttributeFlags_EnableLinkDetachWithDragClick: AttributeFlags = 1;
pub const AttributeFlags_AttributeFlags_EnableLinkCreationOnSnap: AttributeFlags = 2;
pub type AttributeFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmulateThreeButtonMouse {
    pub enabled: bool,
    pub modifier: *const bool,
}
#[test]
fn bindgen_test_layout_EmulateThreeButtonMouse() {
    assert_eq!(
        ::std::mem::size_of::<EmulateThreeButtonMouse>(),
        16usize,
        concat!("Size of: ", stringify!(EmulateThreeButtonMouse))
    );
    assert_eq!(
        ::std::mem::align_of::<EmulateThreeButtonMouse>(),
        8usize,
        concat!("Alignment of ", stringify!(EmulateThreeButtonMouse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EmulateThreeButtonMouse>())).enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EmulateThreeButtonMouse),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EmulateThreeButtonMouse>())).modifier as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EmulateThreeButtonMouse),
            "::",
            stringify!(modifier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkDetachWithModifierClick {
    pub modifier: *const bool,
}
#[test]
fn bindgen_test_layout_LinkDetachWithModifierClick() {
    assert_eq!(
        ::std::mem::size_of::<LinkDetachWithModifierClick>(),
        8usize,
        concat!("Size of: ", stringify!(LinkDetachWithModifierClick))
    );
    assert_eq!(
        ::std::mem::align_of::<LinkDetachWithModifierClick>(),
        8usize,
        concat!("Alignment of ", stringify!(LinkDetachWithModifierClick))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LinkDetachWithModifierClick>())).modifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LinkDetachWithModifierClick),
            "::",
            stringify!(modifier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IO {
    pub emulate_three_button_mouse: EmulateThreeButtonMouse,
    pub link_detach_with_modifier_click: LinkDetachWithModifierClick,
}
#[test]
fn bindgen_test_layout_IO() {
    assert_eq!(
        ::std::mem::size_of::<IO>(),
        24usize,
        concat!("Size of: ", stringify!(IO))
    );
    assert_eq!(
        ::std::mem::align_of::<IO>(),
        8usize,
        concat!("Alignment of ", stringify!(IO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IO>())).emulate_three_button_mouse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IO),
            "::",
            stringify!(emulate_three_button_mouse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IO>())).link_detach_with_modifier_click as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IO),
            "::",
            stringify!(link_detach_with_modifier_click)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Style {
    pub grid_spacing: f32,
    pub node_corner_rounding: f32,
    pub node_padding_horizontal: f32,
    pub node_padding_vertical: f32,
    pub node_border_thickness: f32,
    pub link_thickness: f32,
    pub link_line_segments_per_length: f32,
    pub link_hover_distance: f32,
    pub pin_circle_radius: f32,
    pub pin_quad_side_length: f32,
    pub pin_triangle_side_length: f32,
    pub pin_line_thickness: f32,
    pub pin_hover_radius: f32,
    pub pin_offset: f32,
    pub flags: StyleFlags,
    pub colors: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout_Style() {
    assert_eq!(
        ::std::mem::size_of::<Style>(),
        124usize,
        concat!("Size of: ", stringify!(Style))
    );
    assert_eq!(
        ::std::mem::align_of::<Style>(),
        4usize,
        concat!("Alignment of ", stringify!(Style))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).grid_spacing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(grid_spacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).node_corner_rounding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(node_corner_rounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).node_padding_horizontal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(node_padding_horizontal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).node_padding_vertical as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(node_padding_vertical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).node_border_thickness as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(node_border_thickness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).link_thickness as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(link_thickness)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Style>())).link_line_segments_per_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(link_line_segments_per_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).link_hover_distance as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(link_hover_distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).pin_circle_radius as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(pin_circle_radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).pin_quad_side_length as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(pin_quad_side_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).pin_triangle_side_length as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(pin_triangle_side_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).pin_line_thickness as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(pin_line_thickness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).pin_hover_radius as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(pin_hover_radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).pin_offset as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(pin_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Style>())).colors as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Style),
            "::",
            stringify!(colors)
        )
    );
}
extern "C" {
    pub fn imnodes_EditorContextCreate() -> *mut EditorContext;
}
extern "C" {
    pub fn imnodes_EditorContextFree(noname1: *mut EditorContext);
}
extern "C" {
    pub fn imnodes_EditorContextSet(noname1: *mut EditorContext);
}
extern "C" {
    pub fn imnodes_EditorContextGetPanning(pOut: *mut ImVec2);
}
extern "C" {
    pub fn imnodes_EditorContextResetPanning(pos: ImVec2);
}
extern "C" {
    pub fn imnodes_EditorContextMoveToNode(node_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_Initialize();
}
extern "C" {
    pub fn imnodes_Shutdown();
}
extern "C" {
    pub fn imnodes_GetIO() -> *mut IO;
}
extern "C" {
    pub fn imnodes_GetStyle() -> *mut Style;
}
extern "C" {
    pub fn imnodes_StyleColorsDark();
}
extern "C" {
    pub fn imnodes_StyleColorsClassic();
}
extern "C" {
    pub fn imnodes_StyleColorsLight();
}
extern "C" {
    pub fn imnodes_BeginNodeEditor();
}
extern "C" {
    pub fn imnodes_EndNodeEditor();
}
extern "C" {
    pub fn imnodes_PushColorStyle(item: ColorStyle, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn imnodes_PopColorStyle();
}
extern "C" {
    pub fn imnodes_PushStyleVar(style_item: StyleVar, value: f32);
}
extern "C" {
    pub fn imnodes_PopStyleVar();
}
extern "C" {
    pub fn imnodes_BeginNode(id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_EndNode();
}
extern "C" {
    pub fn imnodes_GetNodeDimensions(pOut: *mut ImVec2, id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_BeginNodeTitleBar();
}
extern "C" {
    pub fn imnodes_EndNodeTitleBar();
}
extern "C" {
    pub fn imnodes_BeginInputAttribute(id: ::std::os::raw::c_int, shape: PinShape);
}
extern "C" {
    pub fn imnodes_EndInputAttribute();
}
extern "C" {
    pub fn imnodes_BeginOutputAttribute(id: ::std::os::raw::c_int, shape: PinShape);
}
extern "C" {
    pub fn imnodes_EndOutputAttribute();
}
extern "C" {
    pub fn imnodes_BeginStaticAttribute(id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_EndStaticAttribute();
}
extern "C" {
    pub fn imnodes_PushAttributeFlag(flag: AttributeFlags);
}
extern "C" {
    pub fn imnodes_PopAttributeFlag();
}
extern "C" {
    pub fn imnodes_Link(
        id: ::std::os::raw::c_int,
        start_attribute_id: ::std::os::raw::c_int,
        end_attribute_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn imnodes_SetNodeDraggable(node_id: ::std::os::raw::c_int, draggable: bool);
}
extern "C" {
    pub fn imnodes_SetNodeScreenSpacePos(node_id: ::std::os::raw::c_int, screen_space_pos: ImVec2);
}
extern "C" {
    pub fn imnodes_SetNodeEditorSpacePos(node_id: ::std::os::raw::c_int, editor_space_pos: ImVec2);
}
extern "C" {
    pub fn imnodes_SetNodeGridSpacePos(node_id: ::std::os::raw::c_int, grid_pos: ImVec2);
}
extern "C" {
    pub fn imnodes_GetNodeScreenSpacePos(pOut: *mut ImVec2, node_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_GetNodeEditorSpacePos(pOut: *mut ImVec2, node_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_GetNodeGridSpacePos(pOut: *mut ImVec2, node_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_IsEditorHovered() -> bool;
}
extern "C" {
    pub fn imnodes_IsNodeHovered(node_id: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn imnodes_IsLinkHovered(link_id: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn imnodes_IsPinHovered(attribute_id: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn imnodes_NumSelectedNodes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imnodes_NumSelectedLinks() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imnodes_GetSelectedNodes(node_ids: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_GetSelectedLinks(link_ids: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn imnodes_ClearNodeSelection();
}
extern "C" {
    pub fn imnodes_ClearLinkSelection();
}
extern "C" {
    pub fn imnodes_IsAttributeActive() -> bool;
}
extern "C" {
    pub fn imnodes_IsAnyAttributeActive(attribute_id: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn imnodes_IsLinkStarted(started_at_attribute_id: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn imnodes_IsLinkDropped(
        started_at_attribute_id: *mut ::std::os::raw::c_int,
        including_detached_links: bool,
    ) -> bool;
}
extern "C" {
    pub fn imnodes_IsLinkCreatedBoolPtr(
        started_at_attribute_id: *mut ::std::os::raw::c_int,
        ended_at_attribute_id: *mut ::std::os::raw::c_int,
        created_from_snap: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn imnodes_IsLinkCreatedIntPtr(
        started_at_node_id: *mut ::std::os::raw::c_int,
        started_at_attribute_id: *mut ::std::os::raw::c_int,
        ended_at_node_id: *mut ::std::os::raw::c_int,
        ended_at_attribute_id: *mut ::std::os::raw::c_int,
        created_from_snap: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn imnodes_IsLinkDestroyed(link_id: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn imnodes_SaveCurrentEditorStateToIniString(
        data_size: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn imnodes_SaveEditorStateToIniString(
        editor: *const EditorContext,
        data_size: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn imnodes_LoadCurrentEditorStateFromIniString(
        data: *const ::std::os::raw::c_char,
        data_size: size_t,
    );
}
extern "C" {
    pub fn imnodes_LoadEditorStateFromIniString(
        editor: *mut EditorContext,
        data: *const ::std::os::raw::c_char,
        data_size: size_t,
    );
}
extern "C" {
    pub fn imnodes_SaveCurrentEditorStateToIniFile(file_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn imnodes_SaveEditorStateToIniFile(
        editor: *const EditorContext,
        file_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn imnodes_LoadCurrentEditorStateFromIniFile(file_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn imnodes_LoadEditorStateFromIniFile(
        editor: *mut EditorContext,
        file_name: *const ::std::os::raw::c_char,
    );
}
